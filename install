#!/bin/bash

set -ex

# Python's path that the module is installed on. Default: python3
PYTHON="${PYTHON:=python3}"
PYTHON="$(which "${PYTHON}")"
# Linked rpm's path. Default: rpm.
RPM="${RPM:=rpm}"
# Installed RPM Python module's version. Default: Same version with rpm.
DEFAULT_RPM_VERSION=$("${RPM}" --version | cut -d' ' -f 3)
RPM_VERSION="${RPM_VERSION:=${DEFAULT_RPM_VERSION}}"

# Check system Python
if [[ "${PYTHON}" =~ ^/usr/bin/python.*$ ]]; then
    cat <<EOF
This tool does not install the Python module on system Python: ${PYTHON}.
Install the module maually from the RPM package by dnf or yum command.
EOF
    exit 1
fi

WORK_DIR="$(pwd)/tmp/rpm-py-installer"
if [ -d "${WORK_DIR}" ]; then
    rm -rf "${WORK_DIR}"
fi
mkdir -p "${WORK_DIR}"
cd "${WORK_DIR}"

RPM_REPO_URL='https://github.com/rpm-software-management/rpm'
RPM_NAME="rpm-${RPM_VERSION}-release"
curl -L "${RPM_REPO_URL}/archive/${RPM_NAME}.tar.gz" | tar xz

cd "rpm-${RPM_NAME}/python"

sed -e 's/@PACKAGE_NAME@/rpm/g' \
    -e "s/@VERSION@/${RPM_VERSION}/g" \
    -e "s/@PACKAGE_BUGREPORT@/rpm-maint@lists.rpm.org/g" \
    setup.py.in \
    > setup.py

# If you can not build, check below files.
# $ rpm -ql rpm-libs
# $ ls /usr/lib64/librpm*.so

"${PYTHON}" setup.py build
"${PYTHON}" setup.py install

# Below command is fine for the build?
# pip install -e .

"${PYTHON}" -m pip list | grep -E '^rpm(-python)? +'

echo "PRM Python binding module is installed successfully."

exit 0
